What I've learned so far in confinement by myself:

Après une semaine solo, j'ai repris les cours JavaScript sur OpenClassroom pour pouvoir organiser tout ce qu'on avait appris,
ça allait plutôt vite vu qu'en cours on à appris à lire les codes, c'est pour pouvoir tout noter dans mon cahier et voir des
notions qu'on avait appris: 

- "Apprenez à programmer avec JavaScript" = 
    .les calculs type a++=, l
    .les booleens(true/false), 
    .les fonctions, 
    .la class avec le constructor et this et la méthode d'instance et les conditions (if, else if, else),
    .l'array et les set et map (qui sont différents type de tableau plus évolué,
    .instruction switch avec les break
    .la boucle for avec let in ou let of,
      ex: 
            let guestsSeated = 5;
            let seatsReamaining =10;
            let guestsRemaining = 7;
            
            while (seatsRemaining > 0 && guestsRemaining > 0{
              guestsSeated ++;
              seatsReamaining --;
              guestsRemaining --;
             }
        Dans cet exemple, avant j'avais du mal à comprendre les ++ et les -- mais ça m'a permis de comprendre en langue 
        française ce que cela donnait si par exemple on demandait la valeur de guestsSeated à la fin de cet extrait? 
        Réponse : 
              guestsSeated est initianilisé à 5. La boucle est ensuite exécutée jusqu'à ce que guestsRemaining passe à 0 
              (ce qui arrive avant que seatsRemaining passe à 0): ce qui ajoute 7 invités, pour un résultat final de 12.
    .la méthodes d'instances à une class,
      ex: 
           class Show{
              constructor(title, numberOfSeasons){
                  this.title= title;
                  this.numberOfseasons = numberOfSeasons, 
                  this.ratings = [];
                  this.averageRatings = 0;
                }
                addRating(rating){
                  this.ratings.push(rating);
                  let sum = 0
                  for (let rating of this.ratings){
                  sum +- rating;
                  this.averageRating = sum / this.ratings.length;
     .la méthode statiques
     .refactoriser du code
- "Écrivez du JavaScript pour le web" = 
      . ce qu'est un service web et le protocole HTTP, requête HTTP,
      .rappel du DOM (ex: document.querySelector
                                  .getElementByID
                                               Tagg
                                               ClassName)
       comment le modifier avec get et removeAttribute
       comment empêcher le comportement par défat avec event.preventDefault()
                                                            .stropPropagation() // empeche autres éléments de recevoir l'event
      .Ajax (asynchronous JavaScript and XML) qui est un ensemble d'objets et de fonctions 
       ex: 
           var request = new XMLHttpRequest(); //la on créer un nouvel objet XML .. = objet AJAX
           request.open ("GET", "http://url-service-web.com/api/users"); // la on demande ouvrir connexion vers le service web
           request.send(); //on envoie la requête
      
      .récupérer les données au format JSON (JavaScript Object Notation) qui est un format plus léger par rapport au XML donc
        plus rapide 
        ex:
           var request = new XMLHttpRequest();
           request.on readystatechange = function{
              if(this.readyState == XMLHttpRequest.DONE && this.status == 200){
                    var response = JSON.parse (this.responseText)
                    console.log (response.current_condition);
              }
           }
         
                onreadystatechange = pour récupérer l'etat actuel de la requête 
                readyState = contient l'état de la requête 
                DONE = une fois que la requête est terminé
                status = contient code de status 
                JSON.parse = afin de transformer le texte JSON de la repo en objet JavaScript
                responseText = contient réponse du service web au format texte
       .j'ai appris qu'il fallait aussi ensuite valider ces données suite à des évènements DOM
       .les contraintes HTML avec l'attribut type (bon refresh) ="email" avec min/max,required, min lenght
       .les patterns 
       .envoyer des données avec une requête POST via Ajax 
         ex:
            var request = new XMLHttpRequest();
            request.open ("POST", "http://url-service-web.com/api/users");
            request.setRequestHeader("Content-Type", "application/json");
            request.send (JSON.stringify (jsonBody));
                
                1.JSON.stringify(json = on veut envoyer du JSON a notre service web il faut donc transformer notre objet JavaScript
                en JSON
                2. Pcq l'on veut envoyer du JSON a notre service web, il faut le prévenir qu'il va recevoir du JSON, grace hearders
                et il faut donc ajouter cette ligne: request.setRequestHeader ("content-type", "application/json");
                
      .les fonctions asynchrones, 
          avec l'event loop : la fonction setTimeout étant la plus répandue
                               2 paramètres: la fonction à exécuter et le délai 
          ex:
              setTimeout(function(){
                console.log("I"m here!)
                }, 5000)                   // délai en milliseconde avant d'éxécuter la fonction 
                
              console.log ("Where are you");
           avec la fonction cleanTimeout et les autres méthode moins répandue avec setInterval ou setImmediate et l'I/O 
           avec la gestion callback = fonction qui sera exécuté par une autre fonction lorsque cette dernière aura terminé
      .les promises (+puissant + facile a lire)
          ex: 
              functionThatReturnAPromise()
                .then(function(data){
                })
                .catch(function(err){
                }):
        l'avantage étant de pouvoir chainer les Promises 
       .la gestion Async/Await (plus intuitive, bloc exécution until result) merci Yannick là d'ailleurs pour l'explication 
          ex: 
              async function func1(){
                return 3;
               }
               
               async function func2(){
                return 4;
               }
          var promiseRes = Promise
                  .all ([func1(), func2()])
                  .then (functiion (resultats){
                        return results.reduce (function (acc, res){
                            return acc * res;
                        }, 2);
                   })
                   .then (function(time){
                        return setTimeout (callback, time * 1000);
                   });
         1.en langage humain ca donne qu'on a 2 fonctions asynchrones en parallèle avec Promise.all 
         2.le premier then appelle reduce sur la liste resultat (donc 3 et 4) et les multiplie avec la valeur initiale 2
         (check MDN pour réduce, c'est juste comme cela que ca s'écrit) 
         3.le résultat précédent 24 = time va être appelé avec callback apres 
         4.promiseRes vaut une promesse résolue avec l'identifiant de la fonction setTimeout et la callback est appelé
         après 24 sec. 
